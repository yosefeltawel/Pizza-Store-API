//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.9.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using PizzaStore.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;

namespace PizzaStore.Read.Persistence
{
	/// <summary>Static class for (extension) methods for fetching and projecting instances of PizzaStore.Read.DtoClasses.OrderView from the entity model.</summary>
	public static partial class OrderViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<PizzaStore.Data.EntityClasses.OrderEntity, PizzaStore.Read.DtoClasses.OrderView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<PizzaStore.Data.EntityClasses.OrderEntity, PizzaStore.Read.DtoClasses.OrderView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToOrderView(System.Linq.IQueryable{PizzaStore.Data.EntityClasses.OrderEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToOrderView(ref System.Linq.Expressions.Expression<Func<PizzaStore.Data.EntityClasses.OrderEntity, PizzaStore.Read.DtoClasses.OrderView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToOrderView(EntityQuery{PizzaStore.Data.EntityClasses.OrderEntity}, PizzaStore.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToOrderView(EntityQuery{PizzaStore.Data.EntityClasses.OrderEntity}, PizzaStore.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToOrderViewQs(ref System.Linq.Expressions.Expression<Func<PizzaStore.Read.DtoClasses.OrderView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static OrderViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to PizzaStore.Read.DtoClasses.OrderView which instances are projected from the 
		/// results of the specified baseQuery, which returns PizzaStore.Data.EntityClasses.OrderEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve PizzaStore.Read.DtoClasses.OrderView instances</returns>
		public static IQueryable<PizzaStore.Read.DtoClasses.OrderView> ProjectToOrderView(this IQueryable<PizzaStore.Data.EntityClasses.OrderEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to PizzaStore.Read.DtoClasses.OrderView which instances are projected from the 
		/// results of the specified baseQuery using QuerySpec, which returns PizzaStore.Data.EntityClasses.OrderEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve PizzaStore.Read.DtoClasses.OrderView instances</returns>
		public static DynamicQuery<PizzaStore.Read.DtoClasses.OrderView> ProjectToOrderView(this EntityQuery<PizzaStore.Data.EntityClasses.OrderEntity> baseQuery, PizzaStore.Data.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<PizzaStore.Read.DtoClasses.OrderView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToOrderViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ"))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new PizzaStore.Read.DtoClasses.OrderView()
				{
					Id = OrderFields.Id.Source("__BQ").ToValue<System.Int32>(),
					Note = OrderFields.Note.Source("__BQ").ToValue<System.String>(),
					OrderPizzas = (List<PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizza>)qf.OrderPizza.TargetAs("__L1_0")
						.CorrelatedOver(OrderFields.Id.Source("__BQ").Equal(OrderPizzaFields.OrderId.Source("__L1_0")))
						.From(QueryTarget
							.InnerJoin(qf.Pizza.As("__L1_1")).On(OrderPizzaFields.PizzaId.Source("__L1_0").Equal(PizzaFields.Id.Source("__L1_1"))))
						.Select(() => new PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizza()
						{
							Id = OrderPizzaFields.Id.Source("__L1_0").ToValue<System.Int32>(),
							OrderId = OrderPizzaFields.OrderId.Source("__L1_0").ToValue<System.Int32>(),
							Pizza = new PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizzaTypes.Pizza()
								{
									Id = PizzaFields.Id.As("Id1").Source("__L1_1").ToValue<System.Int32>(),
									Ingredients = PizzaFields.Ingredients.Source("__L1_1").ToValue<System.String>(),
									Name = PizzaFields.Name.Source("__L1_1").ToValue<System.String>(),
									Price = PizzaFields.Price.Source("__L1_1").ToValue<System.Decimal>(),
								},
							PizzaId = OrderPizzaFields.PizzaId.Source("__L1_0").ToValue<System.Int32>(),
							PizzaToppings = (List<PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizzaTypes.PizzaTopping>)qf.Order.TargetAs("__L2_0")
								.CorrelatedOver(OrderPizzaFields.Id.Source("__L1_0").Equal(PizzaToppingFields.OrderPizzaId.Source("__L2_0")))
								.From(QueryTarget
									.LeftJoin(qf.OrderPizza.As("__L2_1")).On(OrderPizzaFields.OrderId.Source("__L2_1").Equal(OrderFields.Id.Source("__L2_0")))
									.LeftJoin(qf.PizzaTopping.As("__L2_2")).On(PizzaToppingFields.OrderPizzaId.Source("__L2_2").Equal(OrderPizzaFields.Id.Source("__L2_1")))
									.InnerJoin(qf.Topping.As("__L2_3")).On(PizzaToppingFields.ToppingId.Source("__L2_2").Equal(ToppingFields.Id.Source("__L2_3"))))
								.Select(() => new PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizzaTypes.PizzaTopping()
								{
									Id = PizzaToppingFields.Id.Source("__L2_0").ToValue<System.Int32>(),
									OrderPizzaId = PizzaToppingFields.OrderPizzaId.Source("__L2_0").ToValue<System.Int32>(),
									Topping = new PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizzaTypes.PizzaToppingTypes.Topping()
										{
											Id = ToppingFields.Id.As("Id1").Source("__L2_3").ToValue<System.Int32>(),
											Name = ToppingFields.Name.Source("__L2_3").ToValue<System.String>(),
											Price = ToppingFields.Price.Source("__L2_3").ToValue<System.Decimal>(),
										},
									ToppingId = PizzaToppingFields.ToppingId.Source("__L2_0").ToValue<System.Int32>(),
								}).ToResultset(),
						}).ToResultset(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_OrderView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to PizzaStore.Read.DtoClasses.OrderView which instances are projected from the
		/// PizzaStore.Data.EntityClasses.OrderEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>PizzaStore.Data.EntityClasses.OrderEntity instance created from the specified entity instance</returns>
		public static PizzaStore.Read.DtoClasses.OrderView ProjectToOrderView(this PizzaStore.Data.EntityClasses.OrderEntity entity)
		{
			return _compiledProjector(entity);
		}
		
		private static System.Linq.Expressions.Expression<Func<PizzaStore.Data.EntityClasses.OrderEntity, PizzaStore.Read.DtoClasses.OrderView>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<PizzaStore.Data.EntityClasses.OrderEntity, PizzaStore.Read.DtoClasses.OrderView>> mainProjection = p__0 => new PizzaStore.Read.DtoClasses.OrderView()
			{
				Id = p__0.Id,
				Note = p__0.Note,
				OrderPizzas = p__0.OrderPizzas.Select(p__1 => new PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizza()
				{
					Id = p__1.Id,
					OrderId = p__1.OrderId,
					Pizza = new PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizzaTypes.Pizza()
					{
						Id = p__1.Pizza.Id,
						Ingredients = p__1.Pizza.Ingredients,
						Name = p__1.Pizza.Name,
						Price = p__1.Pizza.Price,
					},
					PizzaId = p__1.PizzaId,
					PizzaToppings = p__1.PizzaToppings.Select(p__2 => new PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizzaTypes.PizzaTopping()
					{
						Id = p__2.Id,
						OrderPizzaId = p__2.OrderPizzaId,
						Topping = new PizzaStore.Read.DtoClasses.OrderViewTypes.OrderPizzaTypes.PizzaToppingTypes.Topping()
						{
							Id = p__2.Topping.Id,
							Name = p__2.Topping.Name,
							Price = p__2.Topping.Price,
						},
						ToppingId = p__2.ToppingId,
					}).ToList(),
				}).ToList(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_OrderView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<PizzaStore.Data.EntityClasses.OrderEntity, PizzaStore.Read.DtoClasses.OrderView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToOrderView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


